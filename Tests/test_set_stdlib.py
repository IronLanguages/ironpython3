# Licensed to the .NET Foundation under one or more agreements.
# The .NET Foundation licenses this file to you under the Apache 2.0 License.
# See the LICENSE file in the project root for more information.

##
## Run selected tests from test_set from StdLib
##

import unittest
import sys

from iptest import run_test

import test.test_set

def load_tests(loader, standard_tests, pattern):
    if sys.implementation.name == 'ironpython':
        suite = unittest.TestSuite()
        suite.addTest(test.test_set.TestBasicOpsBytes('test_copy'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_empty_difference'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_empty_difference_rev'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_empty_intersection'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_empty_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_empty_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_empty_union'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_equivalent_equality'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_intersection_empty'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_isdisjoint_empty'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_iteration'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_length'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_pickling'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_print'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_repr'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_self_difference'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_self_equality'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_self_intersection'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_self_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_self_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_self_union'))
        suite.addTest(test.test_set.TestBasicOpsBytes('test_union_empty'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_copy'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_empty_difference'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_empty_difference_rev'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_empty_intersection'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_empty_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_empty_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_empty_union'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_equivalent_equality'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_intersection_empty'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_isdisjoint_empty'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_iteration'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_length'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_pickling'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_print'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_repr'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_self_difference'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_self_equality'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_self_intersection'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_self_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_self_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_self_union'))
        suite.addTest(test.test_set.TestBasicOpsEmpty('test_union_empty'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_copy'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_empty_difference'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_empty_difference_rev'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_empty_intersection'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_empty_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_empty_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_empty_union'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_equivalent_equality'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_intersection_empty'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_isdisjoint_empty'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_iteration'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_length'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_pickling'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_print'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_repr'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_self_difference'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_self_equality'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_self_intersection'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_self_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_self_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_self_union'))
        suite.addTest(test.test_set.TestBasicOpsMixedStringBytes('test_union_empty'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_copy'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_empty_difference'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_empty_difference_rev'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_empty_intersection'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_empty_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_empty_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_empty_union'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_equivalent_equality'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_in'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_intersection_empty'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_isdisjoint_empty'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_iteration'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_length'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_not_in'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_pickling'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_print'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_repr'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_self_difference'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_self_equality'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_self_intersection'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_self_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_self_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_self_union'))
        suite.addTest(test.test_set.TestBasicOpsSingleton('test_union_empty'))
        suite.addTest(test.test_set.TestBasicOpsString('test_copy'))
        suite.addTest(test.test_set.TestBasicOpsString('test_empty_difference'))
        suite.addTest(test.test_set.TestBasicOpsString('test_empty_difference_rev'))
        suite.addTest(test.test_set.TestBasicOpsString('test_empty_intersection'))
        suite.addTest(test.test_set.TestBasicOpsString('test_empty_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsString('test_empty_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsString('test_empty_union'))
        suite.addTest(test.test_set.TestBasicOpsString('test_equivalent_equality'))
        suite.addTest(test.test_set.TestBasicOpsString('test_intersection_empty'))
        suite.addTest(test.test_set.TestBasicOpsString('test_isdisjoint_empty'))
        suite.addTest(test.test_set.TestBasicOpsString('test_iteration'))
        suite.addTest(test.test_set.TestBasicOpsString('test_length'))
        suite.addTest(test.test_set.TestBasicOpsString('test_pickling'))
        suite.addTest(test.test_set.TestBasicOpsString('test_print'))
        suite.addTest(test.test_set.TestBasicOpsString('test_repr'))
        suite.addTest(test.test_set.TestBasicOpsString('test_self_difference'))
        suite.addTest(test.test_set.TestBasicOpsString('test_self_equality'))
        suite.addTest(test.test_set.TestBasicOpsString('test_self_intersection'))
        suite.addTest(test.test_set.TestBasicOpsString('test_self_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsString('test_self_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsString('test_self_union'))
        suite.addTest(test.test_set.TestBasicOpsString('test_union_empty'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_copy'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_empty_difference'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_empty_difference_rev'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_empty_intersection'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_empty_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_empty_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_empty_union'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_equivalent_equality'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_intersection_empty'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_isdisjoint_empty'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_iteration'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_length'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_pickling'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_print'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_repr'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_self_difference'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_self_equality'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_self_intersection'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_self_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_self_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_self_union'))
        suite.addTest(test.test_set.TestBasicOpsTriple('test_union_empty'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_copy'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_empty_difference'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_empty_difference_rev'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_empty_intersection'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_empty_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_empty_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_empty_union'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_equivalent_equality'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_in'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_intersection_empty'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_isdisjoint_empty'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_iteration'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_length'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_not_in'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_pickling'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_print'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_repr'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_self_difference'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_self_equality'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_self_intersection'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_self_isdisjoint'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_self_symmetric_difference'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_self_union'))
        suite.addTest(test.test_set.TestBasicOpsTuple('test_union_empty'))
        suite.addTest(test.test_set.TestBinaryOps('test_eq'))
        suite.addTest(test.test_set.TestBinaryOps('test_intersection_non_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_intersection_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_intersection_subset'))
        suite.addTest(test.test_set.TestBinaryOps('test_intersection_superset'))
        suite.addTest(test.test_set.TestBinaryOps('test_isdisjoint_non_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_isdisjoint_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_isdisjoint_subset'))
        suite.addTest(test.test_set.TestBinaryOps('test_isdisjoint_superset'))
        suite.addTest(test.test_set.TestBinaryOps('test_sym_difference_non_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_sym_difference_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_sym_difference_subset'))
        suite.addTest(test.test_set.TestBinaryOps('test_sym_difference_superset'))
        suite.addTest(test.test_set.TestBinaryOps('test_union_non_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_union_overlap'))
        suite.addTest(test.test_set.TestBinaryOps('test_union_subset'))
        suite.addTest(test.test_set.TestBinaryOps('test_union_superset'))
        suite.addTest(test.test_set.TestCopyingEmpty('test_copy'))
        suite.addTest(test.test_set.TestCopyingEmpty('test_deep_copy'))
        suite.addTest(test.test_set.TestCopyingNested('test_copy'))
        suite.addTest(test.test_set.TestCopyingNested('test_deep_copy'))
        suite.addTest(test.test_set.TestCopyingSingleton('test_copy'))
        suite.addTest(test.test_set.TestCopyingSingleton('test_deep_copy'))
        suite.addTest(test.test_set.TestCopyingTriple('test_copy'))
        suite.addTest(test.test_set.TestCopyingTriple('test_deep_copy'))
        suite.addTest(test.test_set.TestCopyingTuple('test_copy'))
        suite.addTest(test.test_set.TestCopyingTuple('test_deep_copy'))
        suite.addTest(test.test_set.TestExceptionPropagation('test_changingSizeWhileIterating'))
        suite.addTest(test.test_set.TestExceptionPropagation('test_instanceWithException'))
        suite.addTest(test.test_set.TestExceptionPropagation('test_instancesWithoutException'))
        suite.addTest(test.test_set.TestFrozenSet('test_and'))
        suite.addTest(test.test_set.TestFrozenSet('test_badcmp'))
        suite.addTest(test.test_set.TestFrozenSet('test_constructor_identity'))
        suite.addTest(test.test_set.TestFrozenSet('test_container_iterator'))
        suite.addTest(test.test_set.TestFrozenSet('test_contains'))
        suite.addTest(test.test_set.TestFrozenSet('test_copy'))
        suite.addTest(test.test_set.TestFrozenSet('test_cyclical_print'))
        suite.addTest(test.test_set.TestFrozenSet('test_cyclical_repr'))
        suite.addTest(test.test_set.TestFrozenSet('test_deepcopy'))
        suite.addTest(test.test_set.TestFrozenSet('test_difference'))
        suite.addTest(unittest.expectedFailure(test.test_set.TestFrozenSet('test_do_not_rehash_dict_keys'))) # https://github.com/IronLanguages/ironpython3/issues/848
        suite.addTest(test.test_set.TestFrozenSet('test_equality'))
        suite.addTest(test.test_set.TestFrozenSet('test_free_after_iterating'))
        suite.addTest(test.test_set.TestFrozenSet('test_frozen_as_dictkey'))
        suite.addTest(test.test_set.TestFrozenSet('test_gc'))
        suite.addTest(test.test_set.TestFrozenSet('test_hash'))
        suite.addTest(test.test_set.TestFrozenSet('test_hash_caching'))
        suite.addTest(unittest.expectedFailure(test.test_set.TestFrozenSet('test_hash_effectiveness'))) # https://github.com/IronLanguages/ironpython3/issues/1538
        suite.addTest(test.test_set.TestFrozenSet('test_init'))
        suite.addTest(test.test_set.TestFrozenSet('test_intersection'))
        suite.addTest(test.test_set.TestFrozenSet('test_isdisjoint'))
        suite.addTest(test.test_set.TestFrozenSet('test_iterator_pickling'))
        suite.addTest(test.test_set.TestFrozenSet('test_len'))
        suite.addTest(test.test_set.TestFrozenSet('test_new_or_init'))
        suite.addTest(test.test_set.TestFrozenSet('test_or'))
        suite.addTest(test.test_set.TestFrozenSet('test_pickling'))
        suite.addTest(test.test_set.TestFrozenSet('test_setOfFrozensets'))
        suite.addTest(test.test_set.TestFrozenSet('test_singleton_empty_frozenset'))
        suite.addTest(test.test_set.TestFrozenSet('test_sub'))
        suite.addTest(test.test_set.TestFrozenSet('test_sub_and_super'))
        suite.addTest(test.test_set.TestFrozenSet('test_subclass_with_custom_hash'))
        suite.addTest(test.test_set.TestFrozenSet('test_symmetric_difference'))
        suite.addTest(test.test_set.TestFrozenSet('test_union'))
        suite.addTest(test.test_set.TestFrozenSet('test_uniquification'))
        suite.addTest(test.test_set.TestFrozenSet('test_xor'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_and'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_badcmp'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_constructor_identity'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_container_iterator'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_contains'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_copy'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_cyclical_print'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_cyclical_repr'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_deepcopy'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_difference'))
        suite.addTest(unittest.expectedFailure(test.test_set.TestFrozenSetSubclass('test_do_not_rehash_dict_keys'))) # https://github.com/IronLanguages/ironpython3/issues/848
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_equality'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_free_after_iterating'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_frozen_as_dictkey'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_gc'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_hash'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_hash_caching'))
        suite.addTest(unittest.expectedFailure(test.test_set.TestFrozenSetSubclass('test_hash_effectiveness'))) # https://github.com/IronLanguages/ironpython3/issues/1538
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_init'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_intersection'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_isdisjoint'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_iterator_pickling'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_len'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_nested_empty_constructor'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_new_or_init'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_or'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_pickling'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_setOfFrozensets'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_singleton_empty_frozenset'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_sub'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_sub_and_super'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_subclass_with_custom_hash'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_symmetric_difference'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_union'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_uniquification'))
        suite.addTest(test.test_set.TestFrozenSetSubclass('test_xor'))
        suite.addTest(test.test_set.TestGraphs('test_cube'))
        suite.addTest(test.test_set.TestGraphs('test_cuboctahedron'))
        suite.addTest(test.test_set.TestIdentities('test_binopsVsSubsets'))
        suite.addTest(test.test_set.TestIdentities('test_commutativity'))
        suite.addTest(test.test_set.TestIdentities('test_exclusion'))
        suite.addTest(test.test_set.TestIdentities('test_summations'))
        suite.addTest(test.test_set.TestMutate('test_add_absent'))
        suite.addTest(test.test_set.TestMutate('test_add_present'))
        suite.addTest(test.test_set.TestMutate('test_add_until_full'))
        suite.addTest(test.test_set.TestMutate('test_clear'))
        suite.addTest(test.test_set.TestMutate('test_discard_absent'))
        suite.addTest(test.test_set.TestMutate('test_discard_present'))
        suite.addTest(test.test_set.TestMutate('test_pop'))
        suite.addTest(test.test_set.TestMutate('test_remove_absent'))
        suite.addTest(test.test_set.TestMutate('test_remove_present'))
        suite.addTest(test.test_set.TestMutate('test_remove_until_empty'))
        suite.addTest(test.test_set.TestMutate('test_update_empty_tuple'))
        suite.addTest(test.test_set.TestMutate('test_update_unit_tuple_non_overlap'))
        suite.addTest(test.test_set.TestMutate('test_update_unit_tuple_overlap'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_difference'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_eq_ne'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_ge_gt_le_lt'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_intersection'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_intersection_update'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_intersection_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_sym_difference'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_sym_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_sym_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_union'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_update'))
        suite.addTest(test.test_set.TestOnlySetsDict('test_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_difference'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_eq_ne'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_ge_gt_le_lt'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_intersection'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_intersection_update'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_intersection_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_sym_difference'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_sym_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_sym_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_union'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_update'))
        suite.addTest(test.test_set.TestOnlySetsGenerator('test_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_difference'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_eq_ne'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_ge_gt_le_lt'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_intersection'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_intersection_update'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_intersection_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_sym_difference'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_sym_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_sym_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_union'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_update'))
        suite.addTest(test.test_set.TestOnlySetsNumeric('test_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_difference'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_eq_ne'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_ge_gt_le_lt'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_intersection'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_intersection_update'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_intersection_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_sym_difference'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_sym_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_sym_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_union'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_update'))
        suite.addTest(test.test_set.TestOnlySetsOperator('test_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsString('test_difference'))
        suite.addTest(test.test_set.TestOnlySetsString('test_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsString('test_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsString('test_eq_ne'))
        suite.addTest(test.test_set.TestOnlySetsString('test_ge_gt_le_lt'))
        suite.addTest(test.test_set.TestOnlySetsString('test_intersection'))
        suite.addTest(test.test_set.TestOnlySetsString('test_intersection_update'))
        suite.addTest(test.test_set.TestOnlySetsString('test_intersection_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsString('test_sym_difference'))
        suite.addTest(test.test_set.TestOnlySetsString('test_sym_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsString('test_sym_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsString('test_union'))
        suite.addTest(test.test_set.TestOnlySetsString('test_update'))
        suite.addTest(test.test_set.TestOnlySetsString('test_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_difference'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_eq_ne'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_ge_gt_le_lt'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_intersection'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_intersection_update'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_intersection_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_sym_difference'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_sym_difference_update'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_sym_difference_update_operator'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_union'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_update'))
        suite.addTest(test.test_set.TestOnlySetsTuple('test_update_operator'))
        suite.addTest(test.test_set.TestSet('test_add'))
        suite.addTest(test.test_set.TestSet('test_and'))
        suite.addTest(test.test_set.TestSet('test_badcmp'))
        suite.addTest(test.test_set.TestSet('test_c_api'))
        suite.addTest(test.test_set.TestSet('test_clear'))
        suite.addTest(test.test_set.TestSet('test_constructor_identity'))
        suite.addTest(test.test_set.TestSet('test_container_iterator'))
        suite.addTest(test.test_set.TestSet('test_contains'))
        suite.addTest(test.test_set.TestSet('test_copy'))
        suite.addTest(test.test_set.TestSet('test_cyclical_print'))
        suite.addTest(test.test_set.TestSet('test_cyclical_repr'))
        suite.addTest(test.test_set.TestSet('test_deepcopy'))
        suite.addTest(test.test_set.TestSet('test_difference'))
        suite.addTest(test.test_set.TestSet('test_difference_update'))
        suite.addTest(test.test_set.TestSet('test_discard'))
        suite.addTest(unittest.expectedFailure(test.test_set.TestSet('test_do_not_rehash_dict_keys'))) # https://github.com/IronLanguages/ironpython3/issues/848
        suite.addTest(test.test_set.TestSet('test_equality'))
        suite.addTest(test.test_set.TestSet('test_free_after_iterating'))
        suite.addTest(test.test_set.TestSet('test_gc'))
        suite.addTest(test.test_set.TestSet('test_hash'))
        suite.addTest(test.test_set.TestSet('test_iand'))
        suite.addTest(test.test_set.TestSet('test_init'))
        suite.addTest(test.test_set.TestSet('test_inplace_on_self'))
        suite.addTest(test.test_set.TestSet('test_intersection'))
        suite.addTest(test.test_set.TestSet('test_intersection_update'))
        suite.addTest(test.test_set.TestSet('test_ior'))
        suite.addTest(test.test_set.TestSet('test_isdisjoint'))
        suite.addTest(test.test_set.TestSet('test_isub'))
        suite.addTest(test.test_set.TestSet('test_iterator_pickling'))
        suite.addTest(test.test_set.TestSet('test_ixor'))
        suite.addTest(test.test_set.TestSet('test_len'))
        suite.addTest(test.test_set.TestSet('test_new_or_init'))
        suite.addTest(test.test_set.TestSet('test_or'))
        suite.addTest(test.test_set.TestSet('test_pickling'))
        suite.addTest(test.test_set.TestSet('test_pop'))
        suite.addTest(test.test_set.TestSet('test_remove'))
        suite.addTest(test.test_set.TestSet('test_remove_keyerror_set'))
        suite.addTest(test.test_set.TestSet('test_remove_keyerror_unpacking'))
        suite.addTest(test.test_set.TestSet('test_rich_compare'))
        suite.addTest(test.test_set.TestSet('test_setOfFrozensets'))
        suite.addTest(test.test_set.TestSet('test_set_literal'))
        suite.addTest(test.test_set.TestSet('test_set_literal_evaluation_order'))
        suite.addTest(test.test_set.TestSet('test_set_literal_insertion_order'))
        suite.addTest(test.test_set.TestSet('test_sub'))
        suite.addTest(test.test_set.TestSet('test_sub_and_super'))
        suite.addTest(test.test_set.TestSet('test_subclass_with_custom_hash'))
        suite.addTest(test.test_set.TestSet('test_symmetric_difference'))
        suite.addTest(test.test_set.TestSet('test_symmetric_difference_update'))
        suite.addTest(test.test_set.TestSet('test_union'))
        suite.addTest(test.test_set.TestSet('test_uniquification'))
        suite.addTest(test.test_set.TestSet('test_update'))
        suite.addTest(test.test_set.TestSet('test_weakref'))
        suite.addTest(test.test_set.TestSet('test_xor'))
        suite.addTest(test.test_set.TestSetOfSets('test_constructor'))
        suite.addTest(test.test_set.TestSetSubclass('test_add'))
        suite.addTest(test.test_set.TestSetSubclass('test_and'))
        suite.addTest(test.test_set.TestSetSubclass('test_badcmp'))
        suite.addTest(test.test_set.TestSetSubclass('test_c_api'))
        suite.addTest(test.test_set.TestSetSubclass('test_clear'))
        suite.addTest(test.test_set.TestSetSubclass('test_constructor_identity'))
        suite.addTest(test.test_set.TestSetSubclass('test_container_iterator'))
        suite.addTest(test.test_set.TestSetSubclass('test_contains'))
        suite.addTest(test.test_set.TestSetSubclass('test_copy'))
        suite.addTest(test.test_set.TestSetSubclass('test_cyclical_print'))
        suite.addTest(test.test_set.TestSetSubclass('test_cyclical_repr'))
        suite.addTest(test.test_set.TestSetSubclass('test_deepcopy'))
        suite.addTest(test.test_set.TestSetSubclass('test_difference'))
        suite.addTest(test.test_set.TestSetSubclass('test_difference_update'))
        suite.addTest(test.test_set.TestSetSubclass('test_discard'))
        suite.addTest(unittest.expectedFailure(test.test_set.TestSetSubclass('test_do_not_rehash_dict_keys'))) # https://github.com/IronLanguages/ironpython3/issues/848
        suite.addTest(test.test_set.TestSetSubclass('test_equality'))
        suite.addTest(test.test_set.TestSetSubclass('test_free_after_iterating'))
        suite.addTest(test.test_set.TestSetSubclass('test_gc'))
        suite.addTest(test.test_set.TestSetSubclass('test_hash'))
        suite.addTest(test.test_set.TestSetSubclass('test_iand'))
        suite.addTest(test.test_set.TestSetSubclass('test_init'))
        suite.addTest(test.test_set.TestSetSubclass('test_inplace_on_self'))
        suite.addTest(test.test_set.TestSetSubclass('test_intersection'))
        suite.addTest(test.test_set.TestSetSubclass('test_intersection_update'))
        suite.addTest(test.test_set.TestSetSubclass('test_ior'))
        suite.addTest(test.test_set.TestSetSubclass('test_isdisjoint'))
        suite.addTest(test.test_set.TestSetSubclass('test_isub'))
        suite.addTest(test.test_set.TestSetSubclass('test_iterator_pickling'))
        suite.addTest(test.test_set.TestSetSubclass('test_ixor'))
        suite.addTest(test.test_set.TestSetSubclass('test_len'))
        suite.addTest(test.test_set.TestSetSubclass('test_new_or_init'))
        suite.addTest(test.test_set.TestSetSubclass('test_or'))
        suite.addTest(test.test_set.TestSetSubclass('test_pickling'))
        suite.addTest(test.test_set.TestSetSubclass('test_pop'))
        suite.addTest(test.test_set.TestSetSubclass('test_remove'))
        suite.addTest(test.test_set.TestSetSubclass('test_remove_keyerror_set'))
        suite.addTest(test.test_set.TestSetSubclass('test_remove_keyerror_unpacking'))
        suite.addTest(test.test_set.TestSetSubclass('test_rich_compare'))
        suite.addTest(test.test_set.TestSetSubclass('test_setOfFrozensets'))
        suite.addTest(test.test_set.TestSetSubclass('test_set_literal'))
        suite.addTest(test.test_set.TestSetSubclass('test_set_literal_evaluation_order'))
        suite.addTest(test.test_set.TestSetSubclass('test_set_literal_insertion_order'))
        suite.addTest(test.test_set.TestSetSubclass('test_sub'))
        suite.addTest(test.test_set.TestSetSubclass('test_sub_and_super'))
        suite.addTest(test.test_set.TestSetSubclass('test_subclass_with_custom_hash'))
        suite.addTest(test.test_set.TestSetSubclass('test_symmetric_difference'))
        suite.addTest(test.test_set.TestSetSubclass('test_symmetric_difference_update'))
        suite.addTest(test.test_set.TestSetSubclass('test_union'))
        suite.addTest(test.test_set.TestSetSubclass('test_uniquification'))
        suite.addTest(test.test_set.TestSetSubclass('test_update'))
        suite.addTest(test.test_set.TestSetSubclass('test_weakref'))
        suite.addTest(test.test_set.TestSetSubclass('test_xor'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_add'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_and'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_badcmp'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_c_api'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_clear'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_constructor_identity'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_container_iterator'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_contains'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_copy'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_cyclical_print'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_cyclical_repr'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_deepcopy'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_difference'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_difference_update'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_discard'))
        suite.addTest(unittest.expectedFailure(test.test_set.TestSetSubclassWithKeywordArgs('test_do_not_rehash_dict_keys'))) # https://github.com/IronLanguages/ironpython3/issues/848
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_equality'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_free_after_iterating'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_gc'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_hash'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_iand'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_init'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_inplace_on_self'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_intersection'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_intersection_update'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_ior'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_isdisjoint'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_isub'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_iterator_pickling'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_ixor'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_keywords_in_subclass'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_len'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_new_or_init'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_or'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_pickling'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_pop'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_remove'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_remove_keyerror_set'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_remove_keyerror_unpacking'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_rich_compare'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_setOfFrozensets'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_set_literal'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_set_literal_evaluation_order'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_set_literal_insertion_order'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_sub'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_sub_and_super'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_subclass_with_custom_hash'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_symmetric_difference'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_symmetric_difference_update'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_union'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_uniquification'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_update'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_weakref'))
        suite.addTest(test.test_set.TestSetSubclassWithKeywordArgs('test_xor'))
        suite.addTest(test.test_set.TestSubsetEmptyNonEmpty('test_issubset'))
        suite.addTest(test.test_set.TestSubsetEqualEmpty('test_issubset'))
        suite.addTest(test.test_set.TestSubsetEqualNonEmpty('test_issubset'))
        suite.addTest(test.test_set.TestSubsetNonOverlap('test_issubset'))
        suite.addTest(test.test_set.TestSubsetPartial('test_issubset'))
        suite.addTest(test.test_set.TestUpdateOps('test_difference_method_call'))
        suite.addTest(test.test_set.TestUpdateOps('test_difference_non_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_difference_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_difference_subset'))
        suite.addTest(test.test_set.TestUpdateOps('test_difference_superset'))
        suite.addTest(test.test_set.TestUpdateOps('test_intersection_method_call'))
        suite.addTest(test.test_set.TestUpdateOps('test_intersection_non_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_intersection_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_intersection_subset'))
        suite.addTest(test.test_set.TestUpdateOps('test_intersection_superset'))
        suite.addTest(test.test_set.TestUpdateOps('test_sym_difference_method_call'))
        suite.addTest(test.test_set.TestUpdateOps('test_sym_difference_non_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_sym_difference_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_sym_difference_subset'))
        suite.addTest(test.test_set.TestUpdateOps('test_sym_difference_superset'))
        suite.addTest(test.test_set.TestUpdateOps('test_union_method_call'))
        suite.addTest(test.test_set.TestUpdateOps('test_union_non_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_union_overlap'))
        suite.addTest(test.test_set.TestUpdateOps('test_union_subset'))
        suite.addTest(test.test_set.TestUpdateOps('test_union_superset'))
        suite.addTest(test.test_set.TestVariousIteratorArgs('test_constructor'))
        suite.addTest(test.test_set.TestVariousIteratorArgs('test_inline_methods'))
        suite.addTest(test.test_set.TestVariousIteratorArgs('test_inplace_methods'))
        suite.addTest(test.test_set.TestWeirdBugs('test_8420_set_merge'))
        suite.addTest(test.test_set.TestWeirdBugs('test_iter_and_mutate'))
        suite.addTest(test.test_set.TestWeirdBugs('test_merge_and_mutate'))
        return suite

    else:
        return loader.loadTestsFromModule(test.test_set, pattern)

run_test(__name__)
