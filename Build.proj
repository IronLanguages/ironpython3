<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

  <PropertyGroup>
    <BuildFlavour Condition=" '$(BuildFlavour)' == '' ">Debug</BuildFlavour>
    <MainPlatform Condition=" '$(MainPlatform)' == '' ">net45</MainPlatform>
    <MainBuildPrefix Condition=" '$(MainBuildPrefix)' == '' "></MainBuildPrefix>
    <Mono Condition="'$(OS)' != 'Windows_NT'">true</Mono>

    <RootDir>$(MSBuildThisFileDirectory)</RootDir>
    <Solution>$(RootDir)\IronPython.sln</Solution>
    <UtilDir>$(RootDir)\Util</UtilDir>
    <ReferenceDir>$(RootDir)\Util\References</ReferenceDir>
    <BinDir>$(RootDir)\bin</BinDir>
    <BuildSysDir>$(RootDir)\Build</BuildSysDir>
  </PropertyGroup>
    
  <Import Project="$(BuildSysDir)\Versioning.targets" />
  
  <PropertyGroup>
    <StageDir>$(RootDir)\Stage\$(BuildFlavour)\IronPython-$(PackageVersion)</StageDir>
    <PackageDir>$(RootDir)\Package\$(BuildFlavour)\IronPython-$(PackageVersion)</PackageDir>
  </PropertyGroup>

  <PropertyGroup>
    <BuildProperties>
      RootDir=$(RootDir);
      Solution=$(Solution);
      BuildFlavour=$(BuildFlavour);
      BinDir=$(BinDir);
      StageDir=$(StageDir);
      BuildSysDir=$(BuildSysDir);
      Mono=$(Mono);
      MainPlatform=$(MainPlatform)
    </BuildProperties>
  </PropertyGroup>
  
  <PropertyGroup>
    <NuGet>$(UtilDir)\NuGet\nuget.exe</NuGet>
    <NuGet Condition=" '$(Mono)' != '' ">mono $(NuGet)</NuGet>
    
    <NuGetConfig>$(RootDir)\NuGet.config</NuGetConfig>

    <Zip Condition="'$(OS)' == 'Windows_NT'">$(UtilDir)\Misc\zip.exe</Zip>
    <Zip Condition="'$(OS)' != 'Windows_NT'">zip</Zip>
  </PropertyGroup>

  <ItemGroup>
  <ReferencedPlatform Include="net45">
      <BuildPrefix></BuildPrefix>
    </ReferencedPlatform>
    <ReferencedPlatform Include="net40">
      <BuildPrefix>v4</BuildPrefix>
    </ReferencedPlatform>
  </ItemGroup>

  <ItemGroup>
    <MainStageFiles Include="$(RootDir)\README.md" />
    <MainStageFiles Include="$(RootDir)\LICENSE" />
  </ItemGroup>

  <Target Name="_EnsureNuGetConfig"
          Condition=" !Exists('$(NuGetConfig)') ">
    <Touch Files="$(NuGetConfig)" AlwaysCreate="true" />
  </Target>
  
  <Target Name="_MakeReferenceDir"
          Condition=" !Exists('$(ReferenceDir)') ">
    <MakeDir Directories="$(ReferenceDir)"  />
  </Target>
  
  <Target Name="RestoreReferences"
            DependsOnTargets="_EnsureNuGetConfig;_MakeReferenceDir"
            Inputs="$(RootDir)\packages.config;$(RootDir)\NuGet.config"
            Outputs="$(ReferenceDir)\updated">
    <Exec Command="$(NuGet) restore packages.config -PackagesDirectory &quot;$(ReferenceDir)&quot; -ConfigFile &quot;$(NuGetConfig)&quot;" WorkingDirectory="$(RootDir)" />
    <Touch Files="$(ReferenceDir)\updated" AlwaysCreate="true" />
  </Target>
  
  <Target Name="Build" DependsOnTargets="RestoreReferences">
    <MSBuild 
      Projects="$(Solution)" 
      Targets="Build"
      Properties="$(BuildProperties);ReferencedPlatform=%(ReferencedPlatform.Identity);Configuration=%(ReferencedPlatform.BuildPrefix)$(BuildFlavour)" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="RestoreReferences">
    <MSBuild 
      Projects="$(Solution)" 
      Targets="Rebuild" 
      Properties="$(BuildProperties);ReferencedPlatform=%(ReferencedPlatform.Identity);Configuration=%(ReferencedPlatform.BuildPrefix)$(BuildFlavour)" />
  </Target>

  <Target Name="Clean">
    <MSBuild 
      Projects="$(Solution)" 
      Targets="Clean" 
      Properties="$(BuildProperties);ReferencedPlatform=%(ReferencedPlatform.Identity);Configuration=%(ReferencedPlatform.BuildPrefix)$(BuildFlavour)" />
  </Target>

  <Target Name="_MakeStageDir">
    <MakeDir Directories="$(StageDir)" Condition="!Exists('$(StageDir)')" />
  </Target>

  <Target Name="_PlatformStage" DependsOnTargets="RestoreReferences;_MakeStageDir">
    <MSBuild 
      Projects="$(Solution)" 
      Targets="Build" 
      Properties="$(BuildProperties);ReferencedPlatform=%(ReferencedPlatform.Identity);Configuration=%(ReferencedPlatform.BuildPrefix)$(BuildFlavour);Staging=true" />
  </Target>

  <Target Name="_CopyDlrPlatformReferences" DependsOnTargets="_PlatformStage">
    <ItemGroup>
      <DlrPlatformReferenceFiles
          Include="$(BinDir)\%(ReferencedPlatform.BuildPrefix)$(BuildFlavour)\Microsoft.Scripting.*"
          Exclude="$(BinDir)\%(ReferencedPlatform.BuildPrefix)$(BuildFlavour)\*.pdb">
          <PlatformDestination>%(ReferencedPlatform.Identity)</PlatformDestination>
      </DlrPlatformReferenceFiles>
      <DlrPlatformReferenceFiles
          Include="$(BinDir)\%(ReferencedPlatform.BuildPrefix)$(BuildFlavour)\Microsoft.Dynamic.*"
          Exclude="$(BinDir)\%(ReferencedPlatform.BuildPrefix)$(BuildFlavour)\*.pdb">
          <PlatformDestination>%(ReferencedPlatform.Identity)</PlatformDestination>
      </DlrPlatformReferenceFiles>
    </ItemGroup>
    <Copy SourceFiles="@(DlrPlatformReferenceFiles)"
          DestinationFiles="@(DlrPlatformReferenceFiles->'$(StageDir)\Platforms\%(PlatformDestination)\%(Filename)%(Extension)')" />
  </Target>

  <Target Name="_CopyDlrMainReferences" DependsOnTargets="_MakeStageDir">
    <ItemGroup>
      <DlrMainReferenceFiles
          Include="$(BinDir)\$(MainBuildPrefix)$(BuildFlavour)\Microsoft.Scripting.Core.dll"
          Condition=" Exists('$(BinDir)\$(MainPlatform)$(BuildFlavour)\Microsoft.Scripting.Core.dll')" />
      <DlrMainReferenceFiles
          Include="$(BinDir)\$(MainBuildPrefix)$(BuildFlavour)\Microsoft.Scripting.dll" />
      <DlrMainReferenceFiles
          Include="$(BinDir)\$(MainBuildPrefix)$(BuildFlavour)\Microsoft.Dynamic.dll" />
    </ItemGroup>
    
    <Copy SourceFiles="@(DlrMainReferenceFiles)"
          DestinationFolder="$(StageDir)" />
  </Target>

  <Target Name="_CopyMainStageFiles" DependsOnTargets="_MakeStageDir">
    <Copy SourceFiles="@(MainStageFiles)" DestinationFolder="$(StageDir)" />
  </Target>

  <Target Name="_CopyStdLib" DependsOnTargets="_MakeStageDir">
    <MSBuild Projects="$(RootDir)\Src\StdLib\StdLib.pyproj"
             Properties="OutputPath=$(StageDir)"
             Targets="Stage" />
  </Target>

  <Target Name="_ZipStdLib" DependsOnTargets="_CopyStdLib">
    <Exec Command="$(Zip) -9 -r &quot;$(StageDir)\..\IronPython.StdLib-$(PackageVersion).zip&quot; &quot;Lib&quot;" WorkingDirectory="$(StageDir)" />
  </Target>

  <Target Name="_RemoveDocFiles" DependsOnTargets="_PlatformStage">
    <ItemGroup>
      <UnneededDocXMLFiles Include="$(StageDir)\*.xml" />
      <UnneededDocXMLFiles Include="$(StageDir)\DLLs\*.xml" />
    </ItemGroup>
    <Delete Files="@(UnneededDocXMLFiles)" />
  </Target>

  <PropertyGroup>
    <StageDependsOn>
      _MakeStageDir;
      _PlatformStage;
      _CopyDlrPlatformReferences;
      _CopyDlrMainReferences;
      _CopyMainStageFiles;
      _CopyStdLib;
      _ZipStdLib;
      _RemoveDocFiles
    </StageDependsOn>
  </PropertyGroup>

  <Target Name="Stage" DependsOnTargets="$(StageDependsOn)" />
  
  <Target Name="Package" DependsOnTargets="ZipPackage;NuGetPackage" />

  <Target Name="MakePackageDir">
    <MakeDir Directories="$(PackageDir)" Condition="!Exists('$(PackageDir)')" />
  </Target>

  <ItemGroup>
    <Package Include="IronPython">
      <NuSpecDir>$(RootDir)</NuSpecDir>
    </Package>
    <Package Include="IronPython.StdLib">
      <NuSpecDir>$(RootDir)</NuSpecDir>
    </Package>
  </ItemGroup>

  <PropertyGroup>
    <NuSpecInputs>@(Package->'%(Package.NuSpecDir)\%(Package.Identity).nuspec')</NuSpecInputs>
    <NuPkgOutputs>@(Package->'$(PackageDir)\%(Package.Identity).$(PackageVersion).nupkg')</NuPkgOutputs>
  </PropertyGroup>

  <Target Name="NuGetPackage" DependsOnTargets="Stage;MakePackageDir"
          Inputs="$(NuSpecInputs);@(StageOutputs)"
          Outputs="$(NuPkgOutputs)">
    <Exec Command="$(NuGet) pack &quot;%(Package.NuSpecDir)\%(Package.Identity).nuspec&quot; -BasePath &quot;$(StageDir)&quot; -OutputDirectory &quot;$(PackageDir)&quot; -Version $(PackageVersion)" />
  </Target>

  <Target Name="ZipPackage" DependsOnTargets="Stage;MakePackageDir"
          Inputs="@(StageOutputs)"
          Outputs="$(PackageDir)\dlr-$(PackageVersion).zip">
    <Exec Command="$(Zip) -9 -r &quot;$(PackageDir)\IronPython-$(PackageVersion).zip&quot; &quot;IronPython-$(PackageVersion)&quot;" WorkingDirectory="$(StageDir)\.." />
  </Target>
</Project>

