# Licensed to the .NET Foundation under one or more agreements.
# The .NET Foundation licenses this file to you under the Apache 2.0 License.
# See the LICENSE file in the project root for more information.

# tests for module 'errno'

import errno
import unittest

from iptest import IronPythonTestCase, is_windows, is_linux, is_osx, run_test

class ErrnoTest(IronPythonTestCase):
    def compare_codes(self, expected):
        self.assertEqual(frozenset(errno.errorcode.values()), frozenset(expected.values()))
        self.assertEqual(frozenset(errno.errorcode), frozenset(expected))
        for code in errno.errorcode:
            self.assertEqual(errno.errorcode[code], expected[code])

    @unittest.skipUnless(is_windows, "Windows specific test")
    def test_errno_codes_osx(self):
        cpython_errorcode = {1: 'EPERM', 2: 'ENOENT', 3: 'ESRCH', 4: 'EINTR', 5: 'EIO', 6: 'ENXIO', 7: 'E2BIG', 8: 'ENOEXEC', 9: 'EBADF', 10: 'ECHILD', 11: 'EAGAIN', 12: 'ENOMEM', 13: 'EACCES', 14: 'EFAULT', 16: 'EBUSY', 17: 'EEXIST', 18: 'EXDEV', 19: 'ENODEV', 20: 'ENOTDIR', 21: 'EISDIR', 22: 'EINVAL', 23: 'ENFILE', 24: 'EMFILE', 25: 'ENOTTY', 27: 'EFBIG', 28: 'ENOSPC', 29: 'ESPIPE', 30: 'EROFS', 31: 'EMLINK', 32: 'EPIPE', 33: 'EDOM', 34: 'ERANGE', 36: 'EDEADLOCK', 38: 'ENAMETOOLONG', 39: 'ENOLCK', 40: 'ENOSYS', 41: 'ENOTEMPTY', 42: 'EILSEQ', 104: 'EBADMSG', 105: 'ECANCELED', 111: 'EIDRM', 120: 'ENODATA', 121: 'ENOLINK', 122: 'ENOMSG', 124: 'ENOSR', 125: 'ENOSTR', 127: 'ENOTRECOVERABLE', 129: 'ENOTSUP', 132: 'EOVERFLOW', 133: 'EOWNERDEAD', 134: 'EPROTO', 137: 'ETIME', 139: 'ETXTBSY', 10000: 'WSABASEERR', 10004: 'WSAEINTR', 10009: 'WSAEBADF', 10013: 'WSAEACCES', 10014: 'WSAEFAULT', 10022: 'WSAEINVAL', 10024: 'WSAEMFILE', 10035: 'WSAEWOULDBLOCK', 10036: 'WSAEINPROGRESS', 10037: 'WSAEALREADY', 10038: 'WSAENOTSOCK', 10039: 'WSAEDESTADDRREQ', 10040: 'WSAEMSGSIZE', 10041: 'WSAEPROTOTYPE', 10042: 'WSAENOPROTOOPT', 10043: 'WSAEPROTONOSUPPORT', 10044: 'WSAESOCKTNOSUPPORT', 10045: 'WSAEOPNOTSUPP', 10046: 'WSAEPFNOSUPPORT', 10047: 'WSAEAFNOSUPPORT', 10048: 'WSAEADDRINUSE', 10049: 'WSAEADDRNOTAVAIL', 10050: 'WSAENETDOWN', 10051: 'WSAENETUNREACH', 10052: 'WSAENETRESET', 10053: 'WSAECONNABORTED', 10054: 'WSAECONNRESET', 10055: 'WSAENOBUFS', 10056: 'WSAEISCONN', 10057: 'WSAENOTCONN', 10058: 'WSAESHUTDOWN', 10059: 'WSAETOOMANYREFS', 10060: 'WSAETIMEDOUT', 10061: 'WSAECONNREFUSED', 10062: 'WSAELOOP', 10063: 'WSAENAMETOOLONG', 10064: 'WSAEHOSTDOWN', 10065: 'WSAEHOSTUNREACH', 10066: 'WSAENOTEMPTY', 10067: 'WSAEPROCLIM', 10068: 'WSAEUSERS', 10069: 'WSAEDQUOT', 10070: 'WSAESTALE', 10071: 'WSAEREMOTE', 10091: 'WSASYSNOTREADY', 10092: 'WSAVERNOTSUPPORTED', 10093: 'WSANOTINITIALISED', 10101: 'WSAEDISCON'}
        self.compare_codes(cpython_errorcode)

    @unittest.skipUnless(is_osx, "OSX specific test")
    def test_errno_codes_osx(self):
        # CPython 3.7 on macOS
        cpython_errorcode = {19: 'ENODEV', 65: 'EHOSTUNREACH', 91: 'ENOMSG', 96: 'ENODATA', 15: 'ENOTBLK', 78: 'ENOSYS', 32: 'EPIPE', 22: 'EINVAL', 84: 'EOVERFLOW', 4: 'EINTR', 68: 'EUSERS', 66: 'ENOTEMPTY', 55: 'ENOBUFS', 100: 'EPROTO', 71: 'EREMOTE', 10: 'ECHILD', 62: 'ELOOP', 18: 'EXDEV', 7: 'E2BIG', 3: 'ESRCH', 40: 'EMSGSIZE', 47: 'EAFNOSUPPORT', 64: 'EHOSTDOWN', 46: 'EPFNOSUPPORT', 42: 'ENOPROTOOPT', 16: 'EBUSY', 35: 'EAGAIN', 56: 'EISCONN', 58: 'ESHUTDOWN', 9: 'EBADF', 95: 'EMULTIHOP', 5: 'EIO', 41: 'EPROTOTYPE', 28: 'ENOSPC', 8: 'ENOEXEC', 37: 'EALREADY', 50: 'ENETDOWN', 13: 'EACCES', 92: 'EILSEQ', 20: 'ENOTDIR', 1: 'EPERM', 33: 'EDOM', 61: 'ECONNREFUSED', 21: 'EISDIR', 43: 'EPROTONOSUPPORT', 30: 'EROFS', 49: 'EADDRNOTAVAIL', 90: 'EIDRM', 94: 'EBADMSG', 23: 'ENFILE', 29: 'ESPIPE', 97: 'ENOLINK', 52: 'ENETRESET', 60: 'ETIMEDOUT', 2: 'ENOENT', 17: 'EEXIST', 69: 'EDQUOT', 99: 'ENOSTR', 14: 'EFAULT', 27: 'EFBIG', 11: 'EDEADLK', 57: 'ENOTCONN', 39: 'EDESTADDRREQ', 77: 'ENOLCK', 53: 'ECONNABORTED', 51: 'ENETUNREACH', 70: 'ESTALE', 98: 'ENOSR', 12: 'ENOMEM', 38: 'ENOTSOCK', 31: 'EMLINK', 34: 'ERANGE', 54: 'ECONNRESET', 48: 'EADDRINUSE', 102: 'EOPNOTSUPP', 63: 'ENAMETOOLONG', 25: 'ENOTTY', 44: 'ESOCKTNOSUPPORT', 101: 'ETIME', 59: 'ETOOMANYREFS', 24: 'EMFILE', 26: 'ETXTBSY', 36: 'EINPROGRESS', 6: 'ENXIO', 89: 'ECANCELED', 105: 'EOWNERDEAD', 104: 'ENOTRECOVERABLE', 45: 'ENOTSUP', 80: 'EAUTH', 86: 'EBADARCH', 85: 'EBADEXEC', 88: 'EBADMACHO', 72: 'EBADRPC', 83: 'EDEVERR', 79: 'EFTYPE', 81: 'ENEEDAUTH', 93: 'ENOATTR', 103: 'ENOPOLICY', 67: 'EPROCLIM', 76: 'EPROCUNAVAIL', 75: 'EPROGMISMATCH', 74: 'EPROGUNAVAIL', 82: 'EPWROFF', 73: 'ERPCMISMATCH', 87: 'ESHLIBVERS'}
        self.compare_codes(cpython_errorcode)

    @unittest.skipUnless(is_linux, "Linux specific test")
    def test_errno_codes_linux(self):
        # CPython 3.8 on Linux
        cpython_errorcode = {19: 'ENODEV', 50: 'ENOCSI', 113: 'EHOSTUNREACH', 42: 'ENOMSG', 117: 'EUCLEAN', 45: 'EL2NSYNC', 51: 'EL2HLT', 61: 'ENODATA', 15: 'ENOTBLK', 38: 'ENOSYS', 32: 'EPIPE', 22: 'EINVAL', 75: 'EOVERFLOW', 68: 'EADV', 4: 'EINTR', 87: 'EUSERS', 39: 'ENOTEMPTY', 105: 'ENOBUFS', 71: 'EPROTO', 66: 'EREMOTE', 119: 'ENAVAIL', 10: 'ECHILD', 40: 'ELOOP', 18: 'EXDEV', 7: 'E2BIG', 3: 'ESRCH', 90: 'EMSGSIZE', 97: 'EAFNOSUPPORT', 53: 'EBADR', 112: 'EHOSTDOWN', 96: 'EPFNOSUPPORT', 92: 'ENOPROTOOPT', 16: 'EBUSY', 11: 'EAGAIN', 77: 'EBADFD', 73: 'EDOTDOT', 106: 'EISCONN', 55: 'ENOANO', 108: 'ESHUTDOWN', 44: 'ECHRNG', 80: 'ELIBBAD', 64: 'ENONET', 52: 'EBADE', 9: 'EBADF', 72: 'EMULTIHOP', 5: 'EIO', 49: 'EUNATCH', 91: 'EPROTOTYPE', 28: 'ENOSPC', 8: 'ENOEXEC', 114: 'EALREADY', 100: 'ENETDOWN', 118: 'ENOTNAM', 13: 'EACCES', 48: 'ELNRNG', 84: 'EILSEQ', 20: 'ENOTDIR', 76: 'ENOTUNIQ', 1: 'EPERM', 33: 'EDOM', 54: 'EXFULL', 111: 'ECONNREFUSED', 21: 'EISDIR', 93: 'EPROTONOSUPPORT', 30: 'EROFS', 99: 'EADDRNOTAVAIL', 43: 'EIDRM', 70: 'ECOMM', 69: 'ESRMNT', 121: 'EREMOTEIO', 47: 'EL3RST', 74: 'EBADMSG', 23: 'ENFILE', 82: 'ELIBMAX', 29: 'ESPIPE', 67: 'ENOLINK', 102: 'ENETRESET', 110: 'ETIMEDOUT', 2: 'ENOENT', 17: 'EEXIST', 122: 'EDQUOT', 60: 'ENOSTR', 57: 'EBADSLT', 56: 'EBADRQC', 79: 'ELIBACC', 14: 'EFAULT', 27: 'EFBIG', 35: 'EDEADLOCK', 107: 'ENOTCONN', 89: 'EDESTADDRREQ', 81: 'ELIBSCN', 37: 'ENOLCK', 120: 'EISNAM', 103: 'ECONNABORTED', 101: 'ENETUNREACH', 116: 'ESTALE', 63: 'ENOSR', 12: 'ENOMEM', 88: 'ENOTSOCK', 86: 'ESTRPIPE', 31: 'EMLINK', 34: 'ERANGE', 83: 'ELIBEXEC', 46: 'EL3HLT', 104: 'ECONNRESET', 98: 'EADDRINUSE', 95: 'ENOTSUP', 78: 'EREMCHG', 36: 'ENAMETOOLONG', 25: 'ENOTTY', 85: 'ERESTART', 94: 'ESOCKTNOSUPPORT', 62: 'ETIME', 59: 'EBFONT', 109: 'ETOOMANYREFS', 24: 'EMFILE', 26: 'ETXTBSY', 115: 'EINPROGRESS', 6: 'ENXIO', 65: 'ENOPKG', 123: 'ENOMEDIUM', 124: 'EMEDIUMTYPE', 125: 'ECANCELED', 126: 'ENOKEY', 127: 'EKEYEXPIRED', 128: 'EKEYREVOKED', 129: 'EKEYREJECTED', 130: 'EOWNERDEAD', 131: 'ENOTRECOVERABLE', 132: 'ERFKILL'}
        self.compare_codes(cpython_errorcode)

    def test_code_values(self):
        for code in errno.errorcode:
            self.assertEqual(getattr(errno, errno.errorcode[code]), code)

run_test(__name__)
